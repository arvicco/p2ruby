[p2db:execute_on_startup]
SET NOCOUNT ON

[p2dbodbc:driver]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; select_cursor = { forward_only | static | keyset | dynamic }
;
; default: forward_only
;
; ODBC-cursor types:
; ------------------
; forward_only  -> SQL_CURSOR_FORWARD_ONLY
; static        -> SQL_CURSOR_STATIC
; keyset        -> SQL_CURSOR_KEYSET_DRIVEN
; dynamic       -> SQL_CURSOR_DYNAMIC
;
; Cursor types in MS SQL Server:
; ------------------------------
;   * Forward-only cursors do not support scrolling; they only support
;     fetching rows serially from the start to the end of the cursor.
;   * Static cursors are built in tempdb when the cursor is opened. They
;     always display the result set as it was when the cursor was opened.
;     They never reflect changes to the data. SQL Server static cursors
;     are always read-only. Because a static server cursor is built
;     as a work table in tempdb, the size of the cursor result set cannot
;     exceed the maximum row size allowed by SQL Server.
;   * Keyset-driven cursors have the membership and order of rows
;     in the result set fixed when the cursor is opened. Changes to nonkey
;     columns are visible through the cursor.
;   * Dynamic cursors are the opposite of static cursors. Dynamic cursors
;     reflect all changes made to the rows in their result set. The data
;     values, order, and membership of the rows in the result set can change
;     on each fetch.
;
; Fast Forward-Only Cursors in MS SQL Server (default cursor type):
; -----------------------------------------------------------------
; Default result sets can be used for any SQL statement supported by SQL Server,
; and are the most efficient method of transferring an entire result set to the
; client. But..
; - Default result sets do not support multiple active statements on the same
;   connection. After an SQL statement is executed on a connection, the server
;   does not accept commands (except a request to cancel the rest of the result
;   set) from the client on that connection until all the rows in the result set
;   have been processed.
; - If a result set contains a text, ntext, or image column, a fast forward-only
;   cursor is implicitly converted to a dynamic cursor.
;
; !!!
; В общем.. Если в логе вылезает ODBC-ошибка:
; "[Microsoft][SQL Server ODBC Driver]Connection is busy with results for another hstmt."
;
;   * То надо либо менять тип курсоров, либо прогу перестраивать, чтобы во время извлечения
;   данных по одному соединению с типом курсора по-умолчанию, по этому соединению
;   не исполнялись другие SQL-стейтменты.
;
;   * Кроме того, есть еще такая бага:
;   BUG: S1000 Error When Sharing Connection in Multiple Threads
;   Article ID : 175313 (Q175313)
;   ...
;   RESOLUTION
;   Put CRecordset::Open() calls within a critical section to guarantee that only one
;   thread is executing a SQL command on the connection at a given time.
; !!!
;
select_cursor=forward_only

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; max_binary_size = <size>
;
; Максимальный размер поля БД типа BINARY/VARBINARY.
; По умолчанию: 8000 (как в MS SQL Server 2000).
; Используется для выбора типа поля БД, соответствующего бинарному типу Plaza-II ('b').
; Если размер бинарного поля меньше или равен указанному значению, то
; в БД используется тип BINARY, в противном случае в БД используется тип - LONGBINARY.
;
; Attention! (MS SQL Server 2000)
; -------------------------------
; If a result set contains a text, ntext, or image column, a fast forward-only
; cursor is implicitly converted to a dynamic cursor.
;
max_binary_size=

[p2dbodbc:p2_to_sql]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NULL | NOT NULL (default: NOT NULL)
def_col_nc=NULL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; <p2-type> = <ODBC-type>[;<DB-type-name> [NULL | NOT NULL]]
; -----------------------------------------------------------------------
;
; Для описания <ODBC-type> и <DB-type-name> можно использовать
; специальные переменные:
;   %p2N% - размер N от p2-type
;   %p2M% - размер M от p2-type
; Для описания <DB-type-name> также можно использовать:
;   %dbN% - размер N от ODBC-type
;   %dbM% - размер M от ODBC-type
;
;   p2-type by default mapped to ODBC-type
;   ------- ------------------------------
;   //i1      TINYINT <- unsigned in MS SQL Server 2000
;   i1      SMALLINT
;   i2      SMALLINT
;   i4      INTEGER
;   i8      BIGINT
;   u1      SMALLINT
;   u2      INTEGER
;   u4      NUMERIC,10  
;   //u8      BIGINT <- signed in MS SQL Server 2000
;   u8      NUMERIC,20
;   c       VARCHAR,%p2N%
;   b       VARBINARY,%p2N%
;   bl      LONGVARBINARY,%p2N%
;   d       NUMERIC,%p2N%,%p2M%
;   s       NUMERIC,%p2N%,%p2M%
;   t       TIMESTAMP
;   ('bl' - это p2-binary ('b'), у которого размер больше, чем задано
;           в параметре 'max_binary_size')
;
;   ODBC-type       by default used DB-type-name (+ def_col_nc)
;   ------------    -------------------------------------------
;   CHAR,N          char(N)
;   VARCHAR,N       varchar(N)
;   WCHAR,N         nchar(N)
;   WVARCHAR,N      nvarchar(N)
;   DECIMAL,N[,M]   decimal(N[,M])
;   NUMERIC,N[,M]   numeric(N[,M])
;   SMALLINT        smallint
;   INTEGER         int
;   REAL            real
;   FLOAT           float
;   BIT             bit
;   TINYINT         tinyint
;   BIGINT          bigint
;   BINARY,N        binary(N)
;   VARBINARY,N     varbinary(N)
;   LONGVARBINARY   image
;   TIMESTAMP       datetime
;
; Пример:
;   def_col_nc=NULL
;   i1=
;   c=CHAR,%p2N%
;   t=CHAR,22;char(22) NOT NULL
;   i4=INTEGER;int
;   i8=NUMERIC,14
;   u8=NUMERIC,15;numeric(%dbN%)
;   d=NUMERIC,%p2N%,%p2M%
; с учетом значений по умолчанию:
;   i1=TINYINT;tinyint NULL
;   c=CHAR,%p2N%;char(%p2N%) NULL
;   t=CHAR,23;char(23) NOT NULL
;   i4=INTEGER;int
;   i8=NUMERIC,14;numeric(14) NULL
;   u8=NUMERIC,15;numeric(%dbN%)
;   d=NUMERIC,%p2N%,%p2M%;numeric(%dbN%,%dbM%) NULL
;

[p2dbodbc:sql_to_p2]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; <ODBC-type-ID> = <p2-type>
; -----------------------------------------------------------------------
; Для описания <p2-type> можно использовать:
;   %dbN% - размер N от ODBC-type
;   %dbM% - размер M от ODBC-type
;
;   ODBC-type       by default used p2-type
;   ------------    -----------------------
;   CHAR            c%dbN%
;   VARCHAR         c%dbN%
;   //WCHAR
;   //WVARCHAR
;   DECIMAL         s%dbN%.%dbM%
;   NUMERIC         s%dbN%.%dbM%
;   SMALLINT        i2
;   INTEGER         i4
;   //REAL      
;   //FLOAT      
;   BIT             u1
;   TINYINT         i1
;   BIGINT          i8
;   BINARY          b%dbN%
;   VARBINARY       b%dbN%
;   LONGVARBINARY   b%dbN%
;   TIMESTAMP       t
;
; Пример:
;   TINYINT = u1
;   INTEGER = s4
;   SMALLINT = d2.0
;



[p2dbodbc:error_map]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; <native_error_code> = <P2ERR_code>

; Transaction (Process ID %d) was deadlocked on {%Z} resources with another process and has been chosen as the deadlock victim
; -> P2ERR_DB_BUSY
1205=32794



; <EOF>
